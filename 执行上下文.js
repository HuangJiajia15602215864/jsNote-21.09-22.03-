/*
执⾏上下⽂:
  全局执⾏上下⽂
  函数执⾏上下⽂
  eval 执⾏上下⽂
执⾏上下⽂中有三个重要的属性:
  变量对象（VO），包含变量、函数声明和函数的形参，该属性只能在全局上下⽂中访问
  作⽤域链
  this
作⽤域链:
包含⾃身变量对象和上级变量对象的列表，通过 [[Scope]]属性查找上级变量
*/


/* 
函数和变量提升:将声明的代码移动到了顶部
详情:在⽣成执⾏上下⽂时，会有两个阶段。
一、创建的阶段（具体步骤是创建VO），JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，将整个函数存⼊内存中，变量只声明并且赋值为 undefined
二、代码执⾏阶段，可以直接提前使⽤。
let 不能在声明前使⽤，但是这并不是常说的 let 不会提升， let 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使⽤。
*/
b() // call b
console.log(a) // undefined
var a = 'Hello world'
function b() {
  console.log('call b')
}