/*
（1）解释型语言
使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。
解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下
  解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；
  只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；
  JavaScript、Python等属于解释型语言。

（2）编译型语言
使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。
在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。
因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：
  一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；
  与特定平台相关，一般无法移植到其他平台；
  C、C++等属于编译型语言。

两者主要区别在于： 前者在运行期间才编译，后者源程序编译后即可在该平台运行。所以前者跨平台性好，后者运行速度快。
*/

/*
(1)强类型语言
强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。
被指定了数据类型的变量，除非是经过强制类型转换，否则无法被赋值为其他类型的数据。

(2)弱类型语言
*/

/*
(1)动态类型语言
在运行期间才去做数据类型检查的语言，把类型绑定延后到了运行阶段。

(2)静态类型语言
数据类型是在编译期间确定的，或者说运行之前确定的，编写代码的时候要明确确定变量的数据类型。
*/